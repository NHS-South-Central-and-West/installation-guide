---
title: "Python & R Installation & Usage Guide"
---

SCW users have faced some difficulties when trying to get Python, and to a lesser extent R, installed on their laptops. This guide will hopefully reduce some of that friction, both in terms of installation and basic usage of either Python or R.

## Python

### Installation

To get started with Python, the following are needed:

-	Python
-	Package (and environment) manager
-	IDE/Notebook editor

First, you can download the latest version of Python from the Python [website](https://www.python.org/downloads/). When installing Python, there are several "Optional Features" available. Any features that are checked as default should be installed, but you should also make sure that 'pip' is one of the features that is checked.

Next, there are several "Advanced Options" that are available to select in the installation process. Again, the defaults should remain checked, but in addition to these, the "Add Python to environment variables" option needs to be checked. This should mean that Python is setup properly on your local machine.

Following this, you can install [miniconda](https://docs.conda.io/projects/miniconda/en/latest/miniconda-install.html) for package and virtual environment management. 

There are several options for IDEs or notebook editors, but if you have no previous experience with programming of any kind, I recommend [JupyterLab](https://jupyter.org/install) first. If you have experience with programming generally, but not R, I suggest [VS Code](https://code.visualstudio.com/download). Finally, if your experience with programming comes from R (and presumably RStudio), I would recommend either [RStudio](https://posit.co/download/rstudio-desktop/) (particularly if you plan to continue using R), or [Spyder](https://docs.spyder-ide.org/5/installation.html).

### Setting up Virtual Environments

A virtual environment is a tool for isolating projects such that the packages and all dependencies for the project do not interfere with any other projects. You can use specific versions of a package without that changing the version of the same package you are using in another project, for example. This is an important part of the development process in Python, and it helps ensure that a project is reproducible. 
To create a new environment, open a terminal window, and you can create and then active your new project environment, with the following:

```{python}
#| label: conda-env

conda create --name my-project

conda activate my-project
```
 
The Conda documentation has a good explanation for [how to set up and manage a virtual environment](https://conda.io/projects/conda/en/latest/user-guide/getting-started.html#managing-environments).

### Installing Packages

There are two main ways to manage packages – pip and conda. You can install packages using either, and if you have activated your virtual environment, this will install your package in that environment only.

If you wanted to install the `fingertips_py` package, you need to use pip, using `pip install fingertips_py`.

While `fingertips_py` isn’t available using conda, a lot of packages are available using both pip and conda. If you wanted to install `scipy` using conda (if you wanted to use pip, you would use the same code as above, replacing `fingertips_py` with `scipy`), you would use `conda install scipy`.
 
The Conda documentation has a good explanation for [how to install packages](https://conda.io/projects/conda/en/latest/user-guide/getting-started.html#managing-packages).

In order to take a snapshot of a project's dependencies, you can use `conda env export > environment.yml`. This will make your project reproducible for others.

## R

### Installation

Getting up and running with R is a little simpler than with Python, and the key to getting R working well on SCW laptops appears to be making sure everything is installed on your C drive.

To get started with R, the following are needed:

-	R & RStudio
-	RTools

First, you can download and install the latest version of R from [CRAN](https://cran.rstudio.com/), and the latest version of RStudio from the [Posit website](https://posit.co/download/rstudio-desktop/).
Following this, you will also need RTools, which can be downloaded from [CRAN](https://cran.r-project.org/bin/windows/Rtools/rtools43/rtools.html).

With R, RStudio, and RTools all installed, you should be able to get started using R. 

### Setting up Virtual Environments

Using a virtual environment is less of a necessity in R compared with Python, but it is still good practice! Managing environments can be handled directly in the Console in RStudio, using the [`renv`](https://rstudio.github.io/renv) package. 

`renv` must first be installed using `install.packages("renv")`. Having installed `renv`, you can initialise (and activate) a new environment when working on a new [RStudio Project](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects) using `renv::init()`.

### Installing Packages

Packages can be installed using either `install.packages()` or `renv::install()`, and they can be updated using `update.packages()` or `renv::update()`.

In order to take a snapshot of your project's dependencies, use `renv::snapshot()`.

For more information about environment and dependency management in R, the [`renv` documentation](https://rstudio.github.io/renv/index.html) is the best place to start.

## Further Resources

If you are learning R or Python for the first time, there are lots of really good online resources that will help you on your way. The following are not exhaustive, but are some examples of the resources available for learning R or Python. If these don't work for you, there's lots more out there, but they should get you started!

For learning R:

- [NHS-R Community - Introduction to R](https://nhs-r-community.github.io/intro_r/)
- [R for Data Science](https://r4ds.hadley.nz/)
- [Hands-On Programming with R](https://jjallaire.github.io/hopr/)

For learning Python:

- [Introduction to Python](http://introtopython.org/)
- [The Python Tutorial](https://docs.python.org/3/tutorial/)
- [Automate the Boring Stuff](https://automatetheboringstuff.com/)
- [NHS Digital RAP Community - Python Training Resources](https://nhsdigital.github.io/rap-community-of-practice/training_resources/python/intro-to-python/)
